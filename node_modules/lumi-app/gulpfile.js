const gulp = require('gulp');
const sass = require('gulp-sass');
const babel = require('gulp-babel');
const $ = require('gulp-load-plugins')({ lazy: true });
const config = require('./config.js')();
const sourcemaps = require('gulp-sourcemaps');
const concat = require('gulp-concat');
const terser = require('gulp-terser');
const rename = require('gulp-rename');
const del = require('del');
const browserSync = require('browser-sync').create();
const postcss = require('gulp-postcss');
const autoprefixer = require('autoprefixer');
const cssnano = require('cssnano');
const replace = require('gulp-replace');
const imagemin = require('gulp-imagemin');
const plumber = require('gulp-plumber');
const pug = require('gulp-pug')
const gulpif = require('gulp-if');
const fileinclude = require('gulp-file-include');
const argv = require('yargs').argv;
const path = require('path');
const data = require('gulp-data');
const fs = require('fs');
const headerComment = require('gulp-header-comment');
const header = require('gulp-header');
const packageNode = require('./package.json');

const cache    = require('gulp-cache');
const cached   = require('gulp-cached');
const remember = require('gulp-remember');
const twig = require('gulp-twig')
//gulp copy --production --buildFolder nombre de la carpeta --buildProject nombre del proyecto 




var isProduction = (argv.production === undefined) ? false : true;
var isBuildFolders = (argv.buildFolder === undefined) ? false : true;
var isBuildProject = (argv.buildProject === undefined) ? false : true;
var init = (argv.init === undefined) ? false : true;

var folder = "";
var nameProject = "";
var mainProject = "";

var settings = {
  clean: true,
  scripts: true,
  polyfills: true,
  styles: true,
  svgs: true,
  copy: true,
  reload: true
};



if (isBuildFolders){
  folder = argv.buildFolder
}

if (isBuildProject){
  nameProject = argv.buildProject 
}

if (isBuildFolders && isBuildProject){
  mainProject = folder + '/' + nameProject 
}






const paths = {
  html: {
    src: './' + mainProject + 'src/**/*.html',
    dest: './' + mainProject + 'dist/'
  },
  pug: {
    src: './' + mainProject + 'src/*.pug',
    tmp: './' + mainProject + 'src/template/**/*.pug',
    dest: './' + mainProject + 'dist/'
  },
  twig: {
    src: './' + mainProject + 'src/templates/*.twig',
    tmp: './' + mainProject + 'src/templates/**/*.twig',
    dest: './' + mainProject + 'dist/',
    data: './' + mainProject + 'src/data/*.twig.json'
    
  },
  data: './src/data/',
  input: {
		sass: './src/sass/',
		data: './src/_data/',
		js: './src/js/',
		images: './src/img/'
	},
	output: {
		css: './public/css/',
		js: './public/js/',
		images: './public/img/'
	},
  styles: {
    src: './' + mainProject + 'src/scss/**/*.scss',
    dest: './' + mainProject + 'dist/assets/css'
  },
  scripts: {
    src: './' + mainProject + 'src/js/**/*.js',
    dest: './' + mainProject + 'dist/assets/js'
  },
  vendors: {
    src: './' + mainProject + 'src/js/vendors/**/*.js',
    dest: './' + mainProject + 'dist/assets/js'
  },
  images: {
    src: './' + mainProject + 'src/images/**/*',
    dest: './' + mainProject + 'dist/assets/images'
  },
  favicon: {
    src: './' + mainProject + 'src/favicon.ico',
    dest: './' + mainProject + 'dist'
  },
  copy: {
    src:  mainProject + '/src/',
    dest: mainProject + '/dist/'
  },
  public: './public/',
};

var banner = {
  main: '/*!' +
      ' <%= packageNode.name %> v<%= packageNode.version %> \n' +
      ' | (c) ' + new Date().getFullYear() + ' <%= packageNode.author.name %> \n' +
      ' | <%= packageNode.license %> License \n' +
      ' | <%= packageNode.repository.url %> \n' +
      ' */\n'
};
console.log({
  'isProduction': isProduction ? 'Production' : 'Developer'
})
console.log(JSON.stringify(paths, 0, 2))
const clean = () => del(['./build']);

// Cache busting to prevent browser caching issues
const curTime = new Date().getTime();
const cacheBust = () =>
  gulp
    .src(paths.html.src)
    .pipe(plumber())
    .pipe(replace(/cb=\d+/g, 'cb=' + curTime))
    .pipe(gulp.dest(paths.html.dest));


// Copies all html files
const html =() =>
  gulp
    .src(paths.html.src)
    .pipe(plumber())
    .pipe(gulp.dest(paths.html.dest));
const templatesWatch =() =>
  gulp
    .src(paths.pug.src)
    .pipe(plumber())
    .pipe(cached('pug'))
    .pipe(pug({pretty: true}))
    .pipe(remember('pug'))
    .pipe(gulp.dest(paths.pug.dest))
    .pipe(browserSync.reload({
      stream: true
    }));
const pugg =() =>
    gulp
      .src(paths.pug.src)
      .pipe(plumber())
      .pipe(data(function (file) {
        const json = paths.input.data + path.basename(file.path) + '.json';
        
        delete require.cache[require.resolve(json)];
        return require(json);
      }))
      .pipe(cached('pug'))
      .pipe(pug({pretty: true}))
      .pipe(remember('pug'))
      .pipe($.newer(paths.pug.dest))
      .pipe(gulp.dest(paths.pug.dest))
      .pipe(browserSync.reload({
        stream: true
      }));
const twigs =() =>
  gulp
    .src(paths.twig.src)
    // Stay live and reload on error
    .pipe(plumber({
      handleError: function (err) {
        console.log(err);
        this.emit('end');
      }
    }))
    // Load template pages json data
    .pipe(data(function (file) {
      return JSON.parse(fs.readFileSync(paths.data + path.basename(file.path) + '.json'));		
    }))
    .pipe(
      twig().on('error', function (err) {
          process.stderr.write(err.message + '\n');
          this.emit('end');
      })
    )
    .pipe(gulp.dest(paths.twig.dest));
    
     
    
const fileincludeHtml =() =>
  gulp
    .src(paths.html.src)
    .pipe(fileinclude({
      prefix: '@@',
      context: {
        prod: isProduction,
        arr: ['test1', 'test2']
      },
      basepath: '@file'
    }))
    .pipe(gulp.dest(paths.html.dest));
  


// Convert scss to css, auto-prefix and rename into styles.min.css
const styles = () =>
  gulp
    .src(paths.styles.src)
    .pipe(plumber())
    .pipe(gulpif(!isProduction, sourcemaps.init()))
    .pipe(sass().on('error', sass.logError))
    .pipe(postcss([autoprefixer()]))
    .pipe(gulpif(isProduction, postcss([cssnano()]    )))
    .pipe(
      rename({
        basename: 'styles',
        suffix: '.min'
      })
    )
    .pipe(gulpif(!isProduction, sourcemaps.write('.')))
    
    .pipe(gulpif(isProduction, header(banner.main, { packageNode: packageNode })))
    .pipe(gulp.dest(paths.styles.dest))
    .pipe(browserSync.stream());

// Minify all javascript files and concat them into a single app.min.js
const scripts = () =>
  gulp
    .src(paths.scripts.src)
    .pipe(plumber())
    .pipe(sourcemaps.init())
    .pipe(
      babel({
        presets: ['@babel/preset-env']
      })
    )
    .pipe(terser())
      
    .pipe(concat('app.min.js'))
    .pipe(sourcemaps.write('.'))
    
    .pipe(gulp.dest(paths.scripts.dest));

// Minify all javascript vendors/libs and concat them into a single vendors.min.js
const vendors = () =>
  gulp
    .src(paths.vendors.src)
    .pipe(plumber())
    .pipe(sourcemaps.init())
    .pipe(
      babel({
        presets: ['@babel/preset-env']
      })
    )
    .pipe(terser())
    .pipe(concat('vendors.min.js'))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(paths.vendors.dest));

// Copy and minify images
const images = () =>
  gulp
    .src(paths.images.src)
    .pipe(plumber())
    .pipe(imagemin())
    .pipe(gulp.dest(paths.images.dest));

// Copy the favicon
const favicon = () =>
  gulp
    .src(paths.favicon.src)
    .pipe(plumber())
    .pipe(gulp.dest(paths.favicon.dest));


const copyFiles = () =>
  gulp
    .src('*.*', {read: false})
    .pipe(gulp.dest(paths.copy.src + '/scss'))
    .pipe(gulp.dest(paths.copy.src + '/img'))
    .pipe(gulp.dest(paths.copy.src + '/img/icons'))
    .pipe(gulp.dest(paths.copy.src + '/fonts'))
    .pipe(gulp.dest(paths.copy.src + '/js/'))
    .pipe(gulp.dest(paths.copy.dest + '/css'))
    .pipe(gulp.dest(paths.copy.dest + '/img'))
    .pipe(gulp.dest(paths.copy.dest + '/img/icons'))
    .pipe(gulp.dest(paths.copy.dest + '/fonts'))
    .pipe(gulp.dest(paths.copy.dest + '/js/'));
const rebuild = () =>
  browserSync.reload();

// Watches all .scss, .js and .html changes and executes the corresponding task
function watchFiles() {
  browserSync.init({
    server: {
      baseDir: './dist'
    },
    notify: false
  });

  gulp.watch(paths.styles.src, styles);
  gulp.watch(paths.vendors.src, vendors).on('change', browserSync.reload);
  gulp.watch(paths.favicon.src, favicon).on('change', browserSync.reload);
  gulp.watch(paths.scripts.src, scripts).on('change', browserSync.reload);
  gulp.watch(paths.images.src, images).on('change', browserSync.reload);
  
 // gulp.watch(paths.html.src, fileincludeHtml).on('change', browserSync.reload);
 // gulp.watch(paths.pug.src, pugg).on('change', browserSync.reload);
 // gulp.watch(paths.pug.tmp, templatesWatch).on('change', browserSync.reload);
  gulp.watch([paths.twig.tmp, paths.twig.data], {cwd:'./'}, twigs);
  gulp.watch(paths.html.dest, rebuild).on('change', browserSync.reload);
}

const build = gulp.series(
  clean,
  gulp.parallel(styles, vendors, scripts, images),
  cacheBust
);

const watch = gulp.series(build, watchFiles);
const copy = gulp.parallel(copyFiles);

exports.clean = clean;
exports.styles = styles;
exports.scripts = scripts;
exports.vendors = vendors;
exports.images = images;
exports.favicon = favicon;
exports.watch = watch;
exports.copy = copy;
exports.build = build;
exports.default = build;
